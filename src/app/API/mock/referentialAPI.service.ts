/**
 * KMU WAF API
 * KMU WAF API
 *
 * OpenAPI spec version: v1
 * Contact: youssef-externe.liouene@edf.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpErrorResponse,
} from '@angular/common/http';

import { ApiResponseLandPlotDto } from '../../model/apiResponseLandPlotDto';
import { ApiResponseNetworkProviderDto } from '../../model/apiResponseNetworkProviderDto';
import { ApiResponseSetLandPlotDto } from '../../model/apiResponseSetLandPlotDto';
import { ApiResponseSetNetworkProviderDto } from '../../model/apiResponseSetNetworkProviderDto';
import { ApiResponseobject } from '../../model/apiResponseobject';
import { LandPlotDto } from '../../model/landPlotDto';
import { NetworkProviderDto } from '../../model/networkProviderDto';

import { Observable, of, throwError } from 'rxjs';
import { environment } from 'src/environments/environment';
import { PrivateNetworkDto } from '../../model/privateNetworkDto';
import { ApiResponse } from '../../model/apiResponse';
import { MockDb } from './mockDB';
import { GddUtils } from 'src/app/utils/gddUtils';

@Injectable({ providedIn: 'root' })
export class ReferentialAPIService {
  constructor(public mock: MockDb) {}

  public wrap(content: any): Observable<ApiResponse<any>> {
    return of({ content });
  }

  /**
   * createPrivateNetwork
   *
   * @param request request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createPrivateNetworkUsingPOST(
    request: PrivateNetworkDto,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ApiResponse<PrivateNetworkDto>>;
  public createPrivateNetworkUsingPOST(
    request: PrivateNetworkDto,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ApiResponse<PrivateNetworkDto>>>;
  public createPrivateNetworkUsingPOST(
    request: PrivateNetworkDto,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ApiResponse<PrivateNetworkDto>>>;
  public createPrivateNetworkUsingPOST(
    request: PrivateNetworkDto,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    const names = this.mock.db.pNetworks.map((n) => n.name);

    // bug unicitÃ© sur le nom
    if (names.includes(request.name)) {
      return throwError(
        new HttpErrorResponse({
          status: 500,
          statusText: 'ORA-00001 ERROR: Unique Constraint Violated',
          url: 'https://fake-url/networks',
        })
      );
    }

    // bug code obligatoire
    if (!request.code) {
      return throwError(
        new HttpErrorResponse({
          status: 500,
          statusText: 'Field "code" was not provided',
          url: 'https://fake-url/networks',
        })
      );
    }

    // bug code obligatoire
    if (request.description.length > 64) {
      return throwError(
        new HttpErrorResponse({
          status: 500,
          statusText: 'ORA-01401: Inserted value too large for column',
          url: 'https://fake-url/networks',
        })
      );
    }

    request.privateNetworkId = GddUtils.generateRandomUuid();
    this.mock.db.pNetworks.push(request);

    return this.wrap(request);
  }

  /**
   * fetchPrivateNetwork
   *
   * @param offset
   * @param pageNumber
   * @param pageSize
   * @param paged
   * @param sortSorted
   * @param sortUnsorted
   * @param unpaged
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public fetchPrivateNetworkUsingGET(
    query: string,
    enabled: boolean,
    page: number,
    size: number,
    offset?: number,
    paged?: boolean,
    sortSorted?: boolean,
    sortUnsorted?: boolean,
    unpaged?: boolean,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ApiResponse<PrivateNetworkDto[]>>;
  public fetchPrivateNetworkUsingGET(
    query: string,
    enabled: boolean,
    page: number,
    size: number,
    offset?: number,
    paged?: boolean,
    sortSorted?: boolean,
    sortUnsorted?: boolean,
    unpaged?: boolean,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ApiResponse<PrivateNetworkDto[]>>>;
  public fetchPrivateNetworkUsingGET(
    query: string,
    enabled: boolean,
    page: number,
    size: number,
    offset?: number,
    paged?: boolean,
    sortSorted?: boolean,
    sortUnsorted?: boolean,
    unpaged?: boolean,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ApiResponse<PrivateNetworkDto[]>>>;
  public fetchPrivateNetworkUsingGET(
    query: string,
    enabled: boolean,
    page: number,
    size: number,
    offset?: number,
    paged?: boolean,
    sortSorted?: boolean,
    sortUnsorted?: boolean,
    unpaged?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    return this.wrap({
      results: this.mock.db.pNetworks,
      totalNumberOfResults: this.mock.db.pNetworks.length,
    });
  }
}
